// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/userSegmentRepository.go

// Package database_test is a generated GoMock package.
package database_test

import (
	reflect "reflect"

	models "github.com/Bionic2113/avito/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockUserSegmentRepository is a mock of UserSegmentRepository interface.
type MockUserSegmentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserSegmentRepositoryMockRecorder
}

// MockUserSegmentRepositoryMockRecorder is the mock recorder for MockUserSegmentRepository.
type MockUserSegmentRepositoryMockRecorder struct {
	mock *MockUserSegmentRepository
}

// NewMockUserSegmentRepository creates a new mock instance.
func NewMockUserSegmentRepository(ctrl *gomock.Controller) *MockUserSegmentRepository {
	mock := &MockUserSegmentRepository{ctrl: ctrl}
	mock.recorder = &MockUserSegmentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserSegmentRepository) EXPECT() *MockUserSegmentRepositoryMockRecorder {
	return m.recorder
}

// Cleaning mocks base method.
func (m *MockUserSegmentRepository) Cleaning() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Cleaning")
}

// Cleaning indicates an expected call of Cleaning.
func (mr *MockUserSegmentRepositoryMockRecorder) Cleaning() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cleaning", reflect.TypeOf((*MockUserSegmentRepository)(nil).Cleaning))
}

// Create mocks base method.
func (m *MockUserSegmentRepository) Create(us *models.UserSegment) (*models.UserSegment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", us)
	ret0, _ := ret[0].(*models.UserSegment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserSegmentRepositoryMockRecorder) Create(us interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserSegmentRepository)(nil).Create), us)
}

// Delete mocks base method.
func (m *MockUserSegmentRepository) Delete(us *models.UserSegment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", us)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserSegmentRepositoryMockRecorder) Delete(us interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserSegmentRepository)(nil).Delete), us)
}

// FindAll mocks base method.
func (m *MockUserSegmentRepository) FindAll() ([]models.UserSegment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]models.UserSegment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockUserSegmentRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockUserSegmentRepository)(nil).FindAll))
}

// FindAllById mocks base method.
func (m *MockUserSegmentRepository) FindAllById(user_id int, active bool) ([]models.UserSegment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllById", user_id, active)
	ret0, _ := ret[0].([]models.UserSegment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllById indicates an expected call of FindAllById.
func (mr *MockUserSegmentRepositoryMockRecorder) FindAllById(user_id, active interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllById", reflect.TypeOf((*MockUserSegmentRepository)(nil).FindAllById), user_id, active)
}

// FindById mocks base method.
func (m *MockUserSegmentRepository) FindById(id int) (*models.UserSegment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", id)
	ret0, _ := ret[0].(*models.UserSegment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockUserSegmentRepositoryMockRecorder) FindById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockUserSegmentRepository)(nil).FindById), id)
}

// Update mocks base method.
func (m *MockUserSegmentRepository) Update(us *models.UserSegment) (*models.UserSegment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", us)
	ret0, _ := ret[0].(*models.UserSegment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockUserSegmentRepositoryMockRecorder) Update(us interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserSegmentRepository)(nil).Update), us)
}
